class Solution {
public:
    int trap(vector<int>& nums) {
        	vector<int>  max_left(nums.size());
	int max_move = 0;
	for (int i = 0; i < nums.size(); i++) {
	
		if (i>0 ) {
			if (max_move < nums[i - 1]) {
				max_move = nums[i-1];
				max_left[i] = max_move;
			}
			max_left[i] = max_move;

		
			
		}
		else {
			max_left[i] = 0;
		}
	}

	int max_move_right = 0;
	vector<int>  max_right(nums.size());

	for (int i = nums.size()-1; i >=0; i--) {
		if (i == nums.size()-1) {
			max_right[i] = 0;
		}
		else {
			if (max_move_right < nums[i + 1]) {
				max_move_right = nums[i + 1];
				max_right[i] = max_move_right;
			}
			else {
				max_right[i] = max_move_right;

			}
		}
	}
	//for (auto& n : max_right) {
	//	cout << n;
	//}
	int traped = 0;
	for (int i = 0; i < nums.size(); i++) {
		int res=min(max_right[i] ,max_left[i]) - nums[i];
		if (res > 0) {
			traped += res;
		}


	}
	    return traped;
    }

};
